@model  ToDo.Models.ToDo
@{
    ViewBag.Title = "ToDo";
}

<h1 class="page-heading">ToDo List</h1>
<br />
<div class="add-button-container">
</div>
<br />
<div class="table-container">
</div>


<div id="toDoModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Add ToDo</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        @Html.HiddenFor(m => m.Number)
                        <div class="form-group">
                            @Html.LabelFor(m => m.Title, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.DueDate, "Due Date", new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <div class="input-group date" data-date-format="dd/mm/yyyy">
                                    @Html.TextBoxFor(m => m.DueDate, new { @class = "form-control" })
                                    <div class="input-group-addon calendar-container">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </div>
                                </div>
                                @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default modal-submit-button" onclick="submitToDo()">Add</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(_ => {
            $('.input-group.date').datepicker({ format: "dd/mm/yyyy" });
            drawToDoTable();
        });

        function drawToDoTable() {
            let table = $(`<table id="todoTable" class="display" style="width:100%">
                                   <thead>
                                       <tr>
                                           <th>Record Number</th>
                                           <th>ToDo Title</th>
                                           <th style="display:none">Due Date</th>
                                           <th style="display:none">Is Marked</th>
                                           <th>Action Column</th>
                                       </tr>
                                   </thead>
                                   <tbody>
                                   </tbody>
                               </table>`);
            let addButton = $('<button type="button" class="btn btn-default" onclick="openModalInAddMode()">Add New</button>');
            $.ajax({
                method: 'GET',
                url: '@Url.Action("Get", "ToDo")',
            }).done(toDos => {
                $('.table-container').children().remove();
                $('.add-button-container').children().remove();
                for (var i = 0; i < toDos.length; i++) {
                    let tr = $(`<tr>
                                    <td class="record-number">${toDos[i].Number}</td>
                                    <td class="toDo-title">${toDos[i].Title}</td>
                                    <td style="display:none" class="due-date">${toDos[i].DueDate}</td>
                                    <td style="display:none" class="is-marked">${toDos[i].IsMarked}</td>
                                    <td class="btn-group">
                                        <button type="button" class="btn btn-link edit-button">Edit</button>
                                        <button type="button" class="btn btn-link delete-button">Delete</button>
                                        <button type="button" class="btn btn-link mark-button">Mark Done</button>
                                    </td>
                                </tr>`);
                    table.children('tbody').append(tr);
                }

                let markedToDos = table.find('td.is-marked:contains(true)').parents('tr');
                markedToDos.css('background-color', 'rgb(127, 255, 127) !important');
                markedToDos.children('td.record-number').css('background-color', 'rgb(127, 255, 127) !important');
                markedToDos.find('.edit-button').hide();
                markedToDos.find('.mark-button').hide();

                $('.add-button-container').append(addButton);
                $('.table-container').append(table);
                $('#todoTable').DataTable();
                $('.edit-button').click(openModalInEditMode);
                $('.delete-button').click(deleteToDo);
                $('.mark-button').click(markToDo);
            });
        }

        function modalAddMode() {
            $('#toDoModal .modal-header .modal-title').text('Add ToDo');
            $('#toDoModal .modal-submit-button').text('Add');
            $('#toDoModal').attr('data-mode', 'add');
        }

        function modalEditMode() {
            $('#toDoModal .modal-header .modal-title').text('Edit ToDo');
            $('#toDoModal .modal-submit-button').text('Edit');
            $('#toDoModal').attr('data-mode', 'edit');
        }

        function resetModal() {
            $('#@Html.IdFor(m => m.Number)').val(null);
            $('#@Html.IdFor(m => m.Title)').val(null);
            $('#@Html.IdFor(m => m.DueDate)').val(null);
        }

        function fillModal(recordData) {
            $('#@Html.IdFor(m => m.Number)').val(recordData.number);
            $('#@Html.IdFor(m => m.Title)').val(recordData.title);
            $('#@Html.IdFor(m => m.DueDate)').val(recordData.date);
        }

        function openModalInAddMode() {
            resetModal();
            modalAddMode();
            $('#toDoModal').modal('show');
        }

        function openModalInEditMode() {
            let button = $(this);
            let recordData = getRecordData(button);
            fillModal(recordData);
            modalEditMode();
            $('#toDoModal').modal('show');
        }

        function getRecordData(button) {
            return {
                number: Number(button.parent('td').siblings('.record-number').text()),
                title: button.parent('td').siblings('.toDo-title').text(),
                date: formatDate(new Date(Number(button.parent('td').siblings('.due-date').text().replace(/\//g, '').replace(/Date/g, '').replace(/\(/g, '').replace(/\)/g, ''))))
            }
        }

        function submitToDo() {
            let actionUrl;
            let modalMode = $('#toDoModal').attr('data-mode');
            if (modalMode == 'add')
                actionUrl = '@Url.Action("Create", "ToDo")';
            else if (modalMode == 'edit')
                actionUrl = '@Url.Action("Edit", "ToDo")';

            let isFormValid = validateForm();
            if (isFormValid) {
                let formData = {
                    Number: $('#@Html.IdFor(m => m.Number)').val(),
                    Title: $('#@Html.IdFor(m => m.Title)').val(),
                    DueDate: $('#@Html.IdFor(m => m.DueDate)').val(),
                };
                $.ajax({
                    method: 'POST',
                    url: actionUrl,
                    data: formData
                }).done(result => {
                    if (Boolean(result.toLowerCase())) {
                        $('#toDoModal').modal('hide');
                        drawToDoTable();
                    }
                });
            }
        }

        function validateForm() {
            if ($('#@Html.IdFor(m => m.Title)').val())
                $('span[data-valmsg-for="@Html.IdFor(m => m.Title)"]').text('');
            else {
                $(`span[data-valmsg-for="@Html.IdFor(m => m.Title)"]`).text('Title is required');
                return false;
            }

            if ($('#@Html.IdFor(m => m.DueDate)').val())
                $('span[data-valmsg-for="@Html.IdFor(m => m.DueDate)"]').text('');
            else {
                $('span[data-valmsg-for="@Html.IdFor(m => m.DueDate)"]').text('Due Date is Required');
                return false;
            }

            return true;
        }

        function deleteToDo() {
            let button = $(this);
            let recordData = getRecordData(button);
            let formData = {
                Number: recordData.number,
                Title: recordData.title,
                DueDate: recordData.date,
            };
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        method: 'POST',
                        url: '@Url.Action("Delete", "ToDo")',
                        data: formData
                    }).done(result => {
                        if (Boolean(result.toLowerCase())) {
                            Swal.fire(
                                'Deleted!',
                                'Your file has been deleted.',
                                'success'
                            );
                            drawToDoTable();
                        }
                    });
                }
            });
        }

        function markToDo() {
            debugger;
            let button = $(this);
            let recordData = getRecordData(button);
            let formData = {
                Number: recordData.number,
                Title: recordData.title,
                DueDate: recordData.date,
                IsMarked: true
            };
            $.ajax({
                method: 'POST',
                url: '@Url.Action("Edit", "ToDo")',
                data: formData
            }).done(result => {
                if (Boolean(result.toLowerCase())) {
                    drawToDoTable();
                }
            });
        }

        function formatDate(date) {
            debugger;
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [day, month, year].join('/');
        }
    </script>
}